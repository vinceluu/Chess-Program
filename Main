#include <iostream>
#include <string>
#include <assert.h>

using namespace std;

const int NUM_ROWS = 8;
const int NUM_COLS = 8;

// **************** CLASS: CELL *******************
class Cell {
	char piece;
	char color;
public:
	Cell();
	void place(char color, char piece);
	string take();
	string getPiece();
	string getName(string name);
};

Cell::Cell() {
	piece = ' ';
	color = ' ';
}

string Cell::take() {
	string result = "";
	result = result.append(1, color);
	result = result.append(1, piece);
	piece = ' ';
	color = ' ';
	return result;
}

void Cell::place(char newColor, char newPiece) { //added new "colors" which are actually just numbers
	assert((newColor == 'W') || (newColor == 'B'));
	color = newColor;
	assert((newPiece == 'R') || (newPiece == 'K') || (newPiece == 'B') || (newPiece == 'Q') || (newPiece == 'K') || (newPiece == 'N') || (newPiece == 'P') || (newPiece == ' '));
	piece = newPiece;

}


string Cell::getPiece() {
	string result = "";
	result = result.append(1, color);
	result = result.append(1, piece);
	return result;
}


// **************** CLASS: BOARD *******************
class Board {
	Cell board[NUM_ROWS][NUM_COLS]; // <-- Not a good idea in the long run
	void displayLine();
public:
	Board();
	Board(string);
	void displayBoard();
	void place(int, int, char, char);
	string take(int toRow, int toCol);
	bool movePieceOneStep(string piece, string direction, int &row, int &col);
	bool cellEmpty(int toRow, int toCol);
	string look(int row, int col);
	bool turn(int row, int col, string direction, int steps);
	bool moveRook(int row, int col, string direction, int steps);
	bool movePawn(int row, int col, string direction, int steps);
	bool moveBishop(int row, int col, string direction, int steps);
	bool moveQueen(int row, int col, string direction, int steps);
	bool moveKing(int row, int col, string direction, int steps);
	bool moveKnight(int row, int col, string direction, int steps);
	bool makeMove(string board, char color);
	bool capture;
	bool makeMove(char color);
	bool checkForCheck(char);
	void searchBoardTop(int &row, int &col, string piece);
	void searchBoardBot(int &row, int &col, string piece);
	string findPiece(int row, int col, string direction, int &steps);
	string findKnight(int row, int col, string direction, int &steps);

};

bool Board::makeMove(char color){
	int row = 0;
	int col = 0;
	string letterRowCol;
	string direction;
	int steps;
	bool valid;
	if (color == 'W'){
		cout << "White's turn!" << endl;
		cout << "Enter cell (row/col) to move: " << endl;
		cin >> letterRowCol;
		if (letterRowCol.at(0) == 'A'){
			row = 0;
		}
		else if (letterRowCol.at(0) == 'B'){
			row = 1;
		}
		else if (letterRowCol.at(0) == 'C'){
			row = 2;
		}
		else if (letterRowCol.at(0) == 'D'){
			row = 3;
		}
		else if (letterRowCol.at(0) == 'E'){
			row = 4;
		}
		else if (letterRowCol.at(0) == 'F'){
			row = 5;
		}
		else if (letterRowCol.at(0) == 'G'){
			row = 6;
		}
		else if (letterRowCol.at(0) == 'H'){
			row = 7;
		}
		if (letterRowCol.at(1) == '0'){
			col = 0;
		}
		else if (letterRowCol.at(1) == '1'){
			col = 1;
		}
		else if (letterRowCol.at(1) == '2'){
			col = 2;
		}
		else if (letterRowCol.at(1) == '3'){
			col = 3;
		}
		else if (letterRowCol.at(1) == '4'){
			col = 4;
		}
		else if (letterRowCol.at(1) == '5'){
			col = 5;
		}
		else if (letterRowCol.at(1) == '6'){
			col = 6;
		}
		else if (letterRowCol.at(1) == '7'){
			col = 7;
		}
		cout << "Enter direction: " << endl;
		cin >> direction;
		cout << "Enter steps: " << endl;
		cin >> steps;

	}

	if (color == 'B'){
		cout << "Black's turn!" << endl;
		cout << "Enter cell (row/col) to move: " << endl;
		cin >> letterRowCol;

		//Converting string input to corresponding row
		if (letterRowCol.at(0) == 'A'){
			row = 0;
		}
		else if (letterRowCol.at(0) == 'B'){
			row = 1;
		}
		else if (letterRowCol.at(0) == 'C'){
			row = 2;
		}
		else if (letterRowCol.at(0) == 'D'){
			row = 3;
		}
		else if (letterRowCol.at(0) == 'E'){
			row = 4;
		}
		else if (letterRowCol.at(0) == 'F'){
			row = 5;
		}
		else if (letterRowCol.at(0) == 'G'){
			row = 6;
		}
		else if (letterRowCol.at(0) == 'H'){
			col = 7;
		}

		//Converting string input to corresponding col
		if (letterRowCol.at(1) == '0'){
			col = 0;
		}
		else if (letterRowCol.at(1) == '1'){
			col = 1;
		}
		else if (letterRowCol.at(1) == '2'){
			col = 2;
		}
		else if (letterRowCol.at(1) == '3'){
			col = 3;
		}
		else if (letterRowCol.at(1) == '4'){
			col = 4;
		}
		else if (letterRowCol.at(1) == '5'){
			col = 5;
		}
		else if (letterRowCol.at(1) == '6'){
			col = 6;
		}
		else if (letterRowCol.at(1) == '7'){
			col = 7;
		}
		cout << "Enter direction: " << endl;
		cin >> direction;
		cout << "Enter steps: " << endl;
		cin >> steps;

	}
	string piece = look(row, col);
	if (piece.at(0) != color){
		cout << "Try again, invalid piece" << endl;
		return false;

	}
	valid = turn(row, col, direction, steps);
	displayBoard();
	return valid;

}

bool mated(){
	return false;
}

bool Board::cellEmpty(int toRow, int toCol){
	string cell = board[toRow][toCol].getPiece();
	if (cell == ("  ")) {
		return true;
	}
	else {
		return false;
	}
}
string Board::look(int row, int col){
	string piece = board[row][col].getPiece();
	return piece;
}

Board::Board() {

	board[0][0].place('B', 'R');
	board[0][1].place('B', 'N');
	board[0][2].place('B', 'B');
	board[0][3].place('B', 'Q');
	board[0][4].place('B', 'K');
	board[0][5].place('B', 'B');
	board[0][6].place('B', 'N');
	board[0][7].place('B', 'R');
	for (int c = 0; c < NUM_COLS; c++) {
		board[1][c].place('B', 'P');
	}

	board[NUM_COLS - 1][0].place('W', 'R');
	board[NUM_COLS - 1][1].place('W', 'N');
	board[NUM_COLS - 1][2].place('W', 'B');
	board[NUM_COLS - 1][3].place('W', 'K');
	board[NUM_COLS - 1][4].place('W', 'Q');
	board[NUM_COLS - 1][5].place('W', 'B');
	board[NUM_COLS - 1][6].place('W', 'N');
	board[NUM_COLS - 1][7].place('W', 'R');
	for (int c = 0; c < NUM_COLS; c++) {
		board[NUM_COLS - 2][c].place('W', 'P');
	}

}

Board::Board(string command){
	if (command == "NOPAWNS"){
		board[0][0].place('B', 'R');
		board[0][1].place('B', 'N');
		board[0][2].place('B', 'B');
		board[0][3].place('B', 'Q');
		board[0][4].place('B', 'K');
		board[0][5].place('B', 'B');
		board[0][6].place('B', 'N');
		board[0][7].place('B', 'R');

		board[NUM_COLS - 1][0].place('W', 'R');
		board[NUM_COLS - 1][1].place('W', 'N');
		board[NUM_COLS - 1][2].place('W', 'B');
		board[NUM_COLS - 1][4].place('W', 'K');
		board[NUM_COLS - 1][3].place('W', 'Q');
		board[NUM_COLS - 1][5].place('W', 'B');
		board[NUM_COLS - 1][6].place('W', 'N');
		board[NUM_COLS - 1][7].place('W', 'R');
	}
}

void Board::displayLine() {
	cout << endl;
	for (int x = 0; x < NUM_COLS + 1; x++) {
		cout << "    | ";
	}
	cout << endl;
	for (int x = 0; x < NUM_COLS + 1; x++) {
		cout << "----| ";
	}
	cout << endl;

}

void Board::displayBoard() {
	cout << endl << "CURRENT BOARD:" << endl << endl;
	cout << "    | ";
	for (int c = 0; c < NUM_COLS; c++) {
		cout << c << "   | ";
	}
	displayLine();
	for (int r = 0; r < NUM_ROWS; r++) {
		if (r == 0){
			cout << 'A' << "   | ";
		}
		else if (r == 1){
			cout << 'B' << "   | ";
		}
		else if (r == 2){
			cout << 'C' << "   | ";
		}
		else if (r == 3){
			cout << 'D' << "   | ";
		}
		else if (r == 4){
			cout << 'E' << "   | ";
		}
		else if (r == 5){
			cout << 'F' << "   | ";
		}
		else if (r == 6){
			cout << 'G' << "   | ";
		}
		else if (r == 7){
			cout << 'H' << "   | ";
		}
		for (int c = 0; c < NUM_COLS; c++) {
			cout << " " << board[r][c].getPiece() << " | ";

		}
		displayLine();
	}
	cout << endl << endl;
}

bool Board::movePieceOneStep(string piece, string direction, int &row, int &col) {
	assert((row >= 0) && (row < NUM_ROWS));
	assert((col >= 0) && (col < NUM_COLS));
	int toRow = row;
	int toCol = col;
	capture = false;
	if (direction == "S")
		toRow = row + 1;
	else if (direction == "N")
		toRow = row - 1;
	else if (direction == "E")
		toCol = col + 1;
	else if (direction == "W")
		toCol = col - 1;
	else if (direction == "NW") {
		toRow = row - 1;
		toCol = col - 1;
	}
	else if (direction == "NE") {
		toRow = row - 1;
		toCol = col + 1;
	}
	else if (direction == "SW") {
		toRow = row + 1;
		toCol = col - 1;
	}
	else if (direction == "SE") {
		toRow = row + 1;
		toCol = col + 1;
	}
	else {
		cout << "INVALID DIRECTION!" << endl;
		return false; // force a failure
	}

	if (((toRow < 0) || (toRow >= NUM_ROWS)) ||
		((toCol < 0) || (toCol >= NUM_COLS))) {
		cout << piece << " has moved out of bounds." << endl;
		return false;
	}

	if (!cellEmpty(toRow, toCol)) {
		string piece = board[row][col].getPiece();
		string pieceMove = board[toRow][toCol].getPiece();
		if (piece.at(0) == pieceMove.at(0)){
			cout << "Space [ " << toRow << ", " << toCol <<
				"] Contains [" << look(toRow, toCol) << "]" << endl;
			return false;
		}

		else if (!cellEmpty(toRow, toCol) && piece.at(0) != pieceMove.at(0)){
			cout << look(row, col) << " successfully captured enemy piece" << endl;
			capture = true;
		}
	}

	piece = take(row, col);
	place(toRow, toCol, piece.at(0), piece.at(1));
	row = toRow;
	col = toCol;
	return true;

}


bool Board::turn(int row, int col, string direction, int steps){
	string piece = board[row][col].getPiece();

	if (piece.at(1) == 'R') {
		return moveRook(row, col, direction, steps);
	}

	else if (piece.at(1) == 'B') {
		return moveBishop(row, col, direction, steps);
	}

	else if (piece.at(1) == 'Q') {
		return moveQueen(row, col, direction, steps);
	}

	else if (piece.at(1) == 'K') {
		return moveKing(row, col, direction, steps);
	}

	else if (piece.at(1) == 'P') {
		return movePawn(row, col, direction, steps);
	}

	else if (piece.at(1) == 'N') {
		return moveKnight(row, col, direction, steps);
	}

}

bool Board::moveKnight(int row, int col, string direction, int steps){
	string piece = look(row, col);
	assert((row >= 0) && (row < NUM_ROWS));
	assert((col >= 0) && (col < NUM_COLS));
	int toRow = row;
	int toCol = col;
	if (direction == "NNE") {
		toRow = row - 2;
		toCol = col + 1;
	}
	else if (direction == "NNW") {
		toRow = row - 2;
		toCol = col - 1;
	}
	else if (direction == "SSE") {
		toRow = row + 2;
		toCol = col + 1;
	}
	else if (direction == "SSW") {
		toRow = row + 2;
		toCol = col - 1;
	}
	else if (direction == "NEE") {
		toRow = row - 1;
		toCol = col + 2;
	}
	else if (direction == "SEE") {
		toRow = row + 1;
		toCol = col + 2;
	}
	else if (direction == "NWW") {
		toRow = row - 1;
		toCol = col - 2;
	}
	else if (direction == "SWW") {
		toRow = row + 1;
		toCol = col - 2;
	}
	else {
		cout << "INVALID DIRECTION!" << endl;
		return false;
	}
	if (((toRow < 0) || (toRow >= NUM_ROWS)) ||
		((toCol < 0) || (toCol >= NUM_COLS))) {
		cout << piece << " has moved out of bounds." << endl;
		return false;
	}
	if (steps != 1){
		cout << "Knights cannot move" << steps << " steps" << endl;
		return false;
	}
	if (!cellEmpty(toRow, toCol)) {
		string piece = board[row][col].getPiece();
		string pieceMove = board[toRow][toCol].getPiece();
		if (piece.at(0) == pieceMove.at(0)){
			cout << "Space [ " << toRow << ", " << toCol <<
				"] Contains [" << look(toRow, toCol) << "]" << endl;
			return false;
		}
		else {
			piece = take(row, col);
			place(toRow, toCol, piece.at(0), piece.at(1));
			row = toRow;
			col = toCol;
			return true;
		}
	}
	else {
		piece = take(row, col);
		place(toRow, toCol, piece.at(0), piece.at(1));
		row = toRow;
		col = toCol;
		return true;

	}

}

bool Board::moveRook(int row, int col, string direction, int steps) {
	capture = false;
	int startRow = row;
	int startCol = col;
	string piece = look(row, col);
	cout << "*** MOVING " << board[row][col].getPiece() << " FROM " << "[" << row << ", " << col << "] " << "Direction:" << direction << " #steps: " << steps << endl;
	if (!((direction == "N") || (direction == "S") || (direction == "W") || (direction == "E"))) {
		cout << "Rooks cannot move in direction " << direction << "!" << endl;
		return false;
	}
	for (int x = 0; x < steps; x++) {
		if (capture == true){
			break;
		}
		if (!movePieceOneStep(piece, direction, row, col)){
			take(row, col);
			place(startRow, startCol, piece.at(0), piece.at(1));
			return false;
		}
	}
	return true;
}
bool Board::moveBishop(int row, int col, string direction, int steps) {
	capture = false;
	int startRow = row;
	int startCol = col;
	string piece = look(row, col);
	cout << "*** MOVING " << board[row][col].getPiece() << " FROM " << "[" << row << ", " << col << "] " << "Direction:" << direction << " #steps: " << steps << endl;
	if (!((direction == "NW") || (direction == "NE") || (direction == "SE") || (direction == "SW"))){
		cout << "Bishops cannot move in direction  " << direction << "!" << endl;
		return false;
	}
	for (int x = 0; x < steps; x++) {
		if (capture == true){
			break;
		}
		if (!movePieceOneStep(piece, direction, row, col)){
			take(row, col);
			place(startRow, startCol, piece.at(0), piece.at(1));
			return false;
		}
	}
	return true;
}
bool Board::moveQueen(int row, int col, string direction, int steps) {
	capture = false;
	int startRow = row;
	int startCol = col;
	string piece = look(row, col);
	cout << "*** MOVING " << board[row][col].getPiece() << " FROM " << "[" << row << ", " << col << "] " << "Direction:" << direction << " #steps: " << steps << endl;
	if (!((direction == "N") || (direction == "S") || (direction == "E") || (direction == "W")
		|| (direction == "NW") || (direction == "NE") || (direction == "SW") || (direction == "SE"))) {
		cout << "Queen cannot move in direction  " << direction << "!" << endl;
		return false;
	}
	for (int x = 0; x < steps; x++) {
		if (capture == true){
			break;
		}
		if (!movePieceOneStep(piece, direction, row, col)){
			take(row, col);
			place(startRow, startCol, piece.at(0), piece.at(1));
			return false;
		}
	}
	return true;
}

bool Board::moveKing(int row, int col, string direction, int steps) {
	capture = false;
	int startRow = row;
	int startCol = col;
	string piece = look(row, col);
	cout << "*** MOVING " << board[row][col].getPiece() << " FROM " << "[" << row << ", " << col << "] " << "Direction:" << direction << " #steps: " << steps << endl;
	if (!((direction == "N") || (direction == "S") || (direction == "E") || (direction == "W")
		|| (direction == "NW") || (direction == "NE") || (direction == "SW") || (direction == "SE"))) {
		cout << "King cannot move in direction " << direction << "!" << endl;
		return false;
	}
	if (steps != 1){
		cout << "Kings can only move 1 space!" << endl;
		return false;
	}
	for (int x = 0; x < steps; x++) {
		if (!movePieceOneStep(piece, direction, row, col)){
			take(row, col);
			place(startRow, startCol, piece.at(0), piece.at(1));
			return false;
		}
	}

	return true;
}

bool Board::movePawn(int row, int col, string direction, int steps) {
	capture = false;
	int startRow = row;
	int startCol = col;
	int toRow;
	int toCol;
	int toColDiagEast;
	int toColDiagWest;
	string piece = look(row, col);
	if (steps > 2){
		cout << "Pawns cannot move more than 2 spaces!" << endl;
		return false;
	}
	if (piece.at(0) == 'B'){
		toRow = row + steps;
		toCol = col;
		toColDiagEast = col + 1;
		toColDiagWest = col - 1;
		string takePieceDiagEast = look(toRow, toColDiagEast);
		string takePieceDiagWest = look(toRow, toColDiagWest);
		if ((direction != "S") && (direction != "SE") && (direction != "SW"))  {
			cout << "Black Pawns cannot move in direction " << direction << "!" << endl;
			return false;
		}
		else if ((direction == "SE") && ((cellEmpty(toRow, toColDiagEast)) || ((!cellEmpty(toRow, toColDiagEast)) && (takePieceDiagEast.at(0) != 'W')))){
			cout << "Black Pawns can only move diagonally to take a white piece!" << endl;
			return false;
		}
		else if ((direction == "SW") && ((cellEmpty(toRow, toColDiagWest)) || ((!cellEmpty(toRow, toColDiagWest)) && (takePieceDiagWest.at(0) != 'W')))){
			cout << "Black Pawns can only move diagonally to take a white piece!" << endl;
			return false;
		}
		else if ((steps == 2) && (row != 1)){
			cout << "Black Pawns cannot move 2 steps after the first move" << endl;
			return false;
		}
		else if ((direction == "S") && (!cellEmpty(toRow, toCol))){
			cout << "Pawns can only take pieces on a diagonal!" << endl;
			return false;
		}
	}

	if (piece.at(0) == 'W'){
		toRow = row - steps;
		toCol = col;
		toColDiagEast = col + 1;
		toColDiagWest = col - 1;
		string takePieceDiagEast = look(toRow, toColDiagEast);
		string takePieceDiagWest = look(toRow, toColDiagWest);
		if ((direction != "N") && (direction != "NE") && (direction != "NW"))   {
			cout << "White Pawns cannot move in direction " << direction << "!" << endl;
			return false;
		}
		else if ((direction == "NE") && ((cellEmpty(toRow, toColDiagEast)) || ((!cellEmpty(toRow, toColDiagEast)) && (takePieceDiagEast.at(0) != 'B')))){
			cout << "White Pawns can only move diagonally to take a black piece!" << endl;
			return false;
		}
		else if ((direction == "NW") && ((cellEmpty(toRow, toColDiagWest)) || ((!cellEmpty(toRow, toColDiagWest)) && (takePieceDiagWest.at(0) != 'B')))){
			cout << "White Pawns can only move diagonally to take a black piece!" << endl;
			return false;
		}
		else if ((steps == 2) && (row != 6)){
			cout << "White Pawns cannot move 2 steps after the first move" << endl;
			return false;
		}
		else if ((direction == "N") && (!cellEmpty(toRow, toCol))){
			cout << "Pawns can only take pieces on a diagonal!" << endl;
			return false;
		}
	}

	for (int i = 0; i < steps; i++){
		if (capture == true){
			break;
		}
		if (!movePieceOneStep(piece, direction, row, col)){
			take(row, col);
			place(startRow, startCol, piece.at(0), piece.at(1));
			return false;
		}
	}
	return true;
}



void Board::place(int row, int col, char color, char piece) {
	assert((row >= 0) && (row < NUM_ROWS));
	assert((col >= 0) && (col < NUM_COLS));
	board[row][col].place(color, piece);
}

string Board::take(int row, int col) {
	assert((row >= 0) && (row < NUM_ROWS));
	assert((col >= 0) && (col < NUM_COLS));
	return board[row][col].take();
}


void Board::searchBoardTop(int &row, int &col, string piece){
	bool found = false;
	for (int r = 0; r < NUM_ROWS; r++){
		for (int c = 0; c < NUM_ROWS; c++){
			if ((look(r, c) == piece) && (found == false)){
				row = r;
				col = c;
				found = true;
			}
		}
	}
	if (found == false){
		row = -1;
		col = -1;
	}
}

void Board::searchBoardBot(int &row, int &col, string piece){
	bool found = false;
	for (int r = 7; r >= 0; r--){
		for (int c = 7; c >= 0; c--){
			if ((look(r, c) == piece) && (found == false)){
				row = r;
				col = c;
				found = true;
			}
		}
	}
	if (found == false){
		row = -1;
		col = -1;
	}
}

bool Board::checkForCheck(char color){
	string pieceDirections[8] = { "N", "E", "S", "W", "NE", "SE", "SW", "NW" };
	int kingRow = -1;
	int kingCol = -1;
	string knightDirections[8] = { "NNE", "SSE", "SWW", "NWW", "NEE", "SEE", "SSW", "NNW" };
	string king = "??";
	if (color == 'W'){
		king = "WK";
	}
	if (color == 'B'){
		king = "BK";
	}

	searchBoardTop(kingRow, kingCol, king);

	for (int x = 0; x < NUM_ROWS; x++){
		int steps = 0;
		string foundPiece = findPiece(kingRow, kingCol, pieceDirections[x], steps);
		if ((foundPiece.at(0) == color) || (foundPiece.at(0) == ' ')){
			;
		}
		else if (((foundPiece.at(1) == 'Q') || (foundPiece.at(1) == 'R')) && (x >= 0 && x <= 3)){
			cout << "King is in check" << endl;
			return true;
		}
		else if (((foundPiece.at(1) == 'Q') || (foundPiece.at(1) == 'B')) && (x >= 4 && x <= 7)){
			cout << "King is in check" << endl;
			return true;
		}
		
	}
	for (int x = 0; x < NUM_ROWS; x++){
		int steps = 0;
		string foundPiece = findKnight(kingRow, kingCol, knightDirections[x], steps);
		if ((foundPiece.at(0) == color) || (foundPiece.at(0) == ' ')){
			;
		}
		else if (foundPiece.at(1) == 'K'){
			cout << "King is in check" << endl;
			return true;
		}
	}

	return true;
}
string Board::findKnight(int row, int col, string direction, int &steps){
	int toRow = row;
	int toCol = col;
	if (direction == "NNE") {
		toRow = row - 2;
		toCol = col + 1;
	}
	else if (direction == "NNW") {
		toRow = row - 2;
		toCol = col - 1;
	}
	else if (direction == "SSE") {
		toRow = row + 2;
		toCol = col + 1;
	}
	else if (direction == "SSW") {
		toRow = row + 2;
		toCol = col - 1;
	}
	else if (direction == "NEE") {
		toRow = row - 1;
		toCol = col + 2;
	}
	else if (direction == "SEE") {
		toRow = row + 1;
		toCol = col + 2;
	}
	else if (direction == "NWW") {
		toRow = row - 1;
		toCol = col - 2;
	}
	else if (direction == "SWW") {
		toRow = row + 1;
		toCol = col - 2;
	}
	if ((toRow < 0 || toRow >= 7) || ((toCol < 0 || toCol >= 7))){
		steps++;
		return "  ";
	}

	else if (!cellEmpty(toRow, toCol)){
		steps++;
		string piece = look(toRow, toCol);
		return piece;
	}

	else {
		return findKnight(toRow, toCol, direction, steps);
	}
}


string Board::findPiece(int row, int col, string direction, int &steps){
	int toRow = row;
	int toCol = col;
	if (direction == "S")
		toRow = row + 1;
	else if (direction == "N")
		toRow = row - 1;
	else if (direction == "E")
		toCol = col + 1;
	else if (direction == "W")
		toCol = col - 1;
	else if (direction == "NW") {
		toRow = row - 1;
		toCol = col - 1;
	}
	else if (direction == "NE") {
		toRow = row - 1;
		toCol = col + 1;
	}
	else if (direction == "SW") {
		toRow = row + 1;
		toCol = col - 1;
	}
	else if (direction == "SE") {
		toRow = row + 1;
		toCol = col + 1;
	}

	if ((toRow < 0 || toRow >= 7) || ((toCol < 0 || toCol >= 7))){
		steps++;
		return "  ";
	}

	else if (!cellEmpty(toRow, toCol)){
		steps++;
		string piece = look(toRow, toCol);
		return piece;
	}

	else {
		return findPiece(toRow, toCol, direction, steps);
	}
}



int main() {
	int counter;
	Board board("NOPAWNS");
	string goOn = "";
	cout << "BEGINNING BOARD:" << endl;
	board.displayBoard();
	while ((goOn != "N") && (goOn != "n")) {
		int step = 0;
		board.checkForCheck('W');
		counter = 0;
		while (!board.makeMove('W')) {
			if (counter++ > 3) {
				cout << "Out of tries! White loses!\n";
				goOn = "N";
				break;
			}
		}
		if (goOn != "N") {
			board.checkForCheck('B');
			counter = 0;
			while (!board.makeMove('B')) {
				if (counter++ > 3) {
					cout << "Out of tries! Black loses!\n";
					goOn = "N";
					break;
				}
			}
		}
		if (goOn != "N") {
			cout << "Continue? (Y/N) ";
			cin >> goOn;
		}
	}

	cout << "ENDING BOARD:" << endl;
	board.displayBoard();
	return 0;
}
